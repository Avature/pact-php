{
	"provider":
	{
		"name": "MockApiProvider"
	},
	"consumer":
	{
		"name": "MockApiConsumer"
	},
	"interactions": [
		{
			"description": "There are ids and names - expect three types by default",
			"providerState": "A GET request to get types",
			"request":
			{
				"method": "get",
				"path": "/provider.php",
				"headers":
				{
					"Content-Type": "application/json"
				}
			},
			"response":
			{
				"status": 200,
				"headers":
				{
					"Content-Type": "application/json"
				},
				"body":
				{
					"types": [
						{
							"id": 100,
							"name": "Type 100"
						},
						{
							"id": 101,
							"name": "Type 101"
						},
						{
							"id": 102,
							"name": "Type 102"
						}
					]
				}
			}
		},
		{
			"description": "There are ids and names - expect up to four types",
			"providerState": "A GET request to get variable types",
			"request":
			{
				"method": "get",
				"path": "/provider.php",
				"query": "?amount=4",
				"headers":
				{
					"Content-Type": "application/json"
				}
			},
			"response":
			{
				"status": 200,
				"headers":
				{
					"Content-Type": "application/json"
				},
				"body":
				{
					"types": [
						{
							"id": 100,
							"name": "Type 100"
						},
						{
							"id": 101,
							"name": "Type 101"
						},
						{
							"id": 102,
							"name": "Type 102"
						},
						{
							"id": 103,
							"name": "Type 103"
						}
					],
					"extra": "ignore me"
				}
			}
		},
		{
			"description": "A GET request to test setup and tear down",
			"providerState": "A GET request for a setup",
			"request":
			{
				"method": "get",
				"path": "/provider.php",
				"query": "?file=mock.json",
				"headers":
				{
					"Content-Type": "application/json"
				}
			},
			"response":
			{
				"status": 200,
				"headers":
				{
					"Content-Type": "application/json"
				},
				"body":
				{
					"types": [
						{
							"id": 700,
							"name": "mock"
						}
					]
				}
			}
		},
		{
			"description": "A POST request to save types",
			"providerState": "There is something to POST to",
			"request":
			{
				"method": "post",
				"path": "/provider.php",
				"headers":
				{
					"Accept": "application/json"
				},
				"body":
				{
					"value": 1
				}
			},
			"response":
			{
				"status": 200,
				"headers":
				{
					"Content-Type": "application/json"
				},
				"body":
				{
					"type": "some new type"
				}
			}
		},
		{
			"description": "A GET request with an XML header",
			"providerState": "There is an XML alligator named Mary",
			"request":
			{
				"method": "get",
				"path": "/provider.php",
				"query": "xml=true",
				"headers":
				{
					"Accept": "application/xml"
				}
			},
			"response":
			{
				"status": 200,
				"headers":
				{
					"Content-Type": "application/xml"
				},
				"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><alligator name=\"Mary\" feet=\"4\"><favoriteColor>blue</favoriteColor></alligator>"
			}
		},
		{
			"description": "A GET request with an XML to compare to matchers",
			"providerState": "There is an XML alligator named Mary and favorite color should be an array",
			"request":
			{
				"method": "get",
				"path": "/provider.php",
				"query": "xml=true",
				"headers":
				{
					"Accept": "application/xml"
				}
			},
			"response":
			{
				"status": 200,
				"headers":
				{
					"Content-Type": "application/xml"
				},
				"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><alligator name=\"Mary\" feet=\"4\"><favoriteColor>blue</favoriteColor></alligator>",
				"matchingRules": {
					"$.body.alligator.favoriteColor": {
						"match": "type"
					}
				}
			}
		},
		{
			"description": "A GET request with a base / path and a content type of json",
			"providerState": "A GET request to get variable types with matches",
			"request": {
				"method": "GET",
				"path": "/provider.php",
				"query": "?amount=6",
				"headers": {
					"Content-Type": "application/json"
				}
			},
			"response": {
				"status": 200,
				"headers": {
					"Content-Type": "application/json"
				},
				"body":
				{
					"types": [
						{
							"id": 100,
							"name": "Type 100"
						},
						{
							"id": 101,
							"name": "Type 101"
						},
						{
							"id": 102,
							"name": "Type 102"
						},
						{
							"id": 103,
							"name": "Type 103"
						}
					]
				},
				"matchingRules": {
					"$.body.types[*].name": {
						"match": "regex",
						"regex": "Type"
					},
					"$.body.types[*].id": {
						"match": "type"
					},
					"$.body.types[*]": {
						"min": 3
					}
				}
			}
		}
	],
	"metadata":
	{
		"pactSpecificationVersion": "2.0.0"
	}
}
